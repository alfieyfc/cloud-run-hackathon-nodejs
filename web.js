const express = require('express');
const app = express();
const bodyParser = require('body-parser');
const util = require('./util')

const math = require('mathjs')

const directions = ['N', 'E', 'S', 'W'];
const moves = ['T', 'F', 'R', 'L'];

require('dotenv').config();

const port = process.env.PORT || 8080;
const myUrl = process.env.MY_URL || "https://foo.com";

app.use(bodyParser.json());

app.get('/', function (req, res) {
  res.send('Let the battle begin!');
});

app.post('/', function (req, res) {

  arenaDims = req.body.arena.dims;
  state = req.body.arena.state;
  numPlayers = Object.keys(state).length;
  me = state[myUrl]
  topPlayer = util.topPlayerState(state);
  closestPlayer = util.closestPlayerState(state, me, myUrl);

  var input = [
    arenaDims[0],
    arenaDims[1],
    numPlayers,
    me.x,
    me.y,
    me.score,
    directions.indexOf(me.direction),
    Number(me.wasHit),
    topPlayer.x,
    topPlayer.y,
    topPlayer.score,
    directions.indexOf(topPlayer.direction),
    Number(topPlayer.wasHit),
    closestPlayer.x,
    closestPlayer.y,
    closestPlayer.score,
    directions.indexOf(closestPlayer.direction),
    Number(closestPlayer.wasHit)
  ]

  var wIL = [
    [
      1.0680346886954424,
      0.8784311372596543,
      0.5779009109260762,
      0.7128245263947456,
      0.5671393241415189,
      0.17227668146848923,
      0.27311129449817456,
      0.5926690573174545,
      0.9245998999023715,
      0.9431361810855939
    ],
    [
      0.8803556237155135,
      0.11043683534490963,
      0.48932946289700247,
      0.8574554747478434,
      0.04095032528262985,
      0.040875600386328884,
      0.2410826535395311,
      0.0006640457554624126,
      0.1396717056434533,
      0.5296676091736087
    ],
    [
      0.40425631862687356,
      0.11978634482131413,
      0.3099276154403224,
      0.48527408820693385,
      0.7357829868871083,
      0.4123219789522727,
      0.3653606874278979,
      0.7183669178264929,
      0.5112710780400214,
      0.3889190858541943
    ],
    [
      0.8655272590668192,
      0.6436286420430035,
      0.29279700621144983,
      1.056204779951319,
      0.03093414365591173,
      0.02158658128372509,
      1.03227614176505,
      0.6192654163120603,
      0.6143494297331297,
      0.681240227396704
    ],
    [
      0.4275296213018868,
      0.9189480896506973,
      0.6999670577708113,
      0.8701209749262918,
      0.5473896135452168,
      1.0160082161863715,
      1.1596982899221182,
      0.3370450169940933,
      0.6653464687866227,
      0.7884017971844051
    ],
    [
      0.08436998367888927,
      0.04840043540992068,
      0.35676381120668055,
      0.7429125182631393,
      0.7150232649218574,
      0.5807686320789939,
      0.03219399583805231,
      0.6260601010775887,
      1.0119935740178083,
      0.5392541518863952
    ],
    [
      0.49569003595529804,
      0.5341530343543336,
      0.9672791532567724,
      0.10701301286411254,
      0.012128852276804339,
      0.3674107064126937,
      0.8875399477610615,
      0.539329598260096,
      0.5198205415143233,
      1.1069822400155183
    ],
    [
      0.2227621620404106,
      0.01747237049299758,
      0.05539816252530679,
      0.5633074722179516,
      0.3687859288320422,
      0.8006610954273364,
      0.17583782910650683,
      0.3613965855869419,
      0.45976442366059284,
      0.3019213604843682
    ],
    [
      0.3649668146542962,
      0.9692359666142668,
      0.8196608095144187,
      0.5421377687589862,
      0.5460103960500722,
      0.9963539239112811,
      0.042579251719128894,
      0.9172343743030994,
      0.6912584589443752,
      1.0749787513074316
    ],
    [
      0.750110813598545,
      0.2033454456851324,
      0.44001194203122984,
      0.5936942711350478,
      0.17254404523670855,
      0.6840535353928675,
      0.48898591839060507,
      0.1873727446417165,
      0.9870477975278216,
      0.7632079262429537
    ],
    [
      0.022157953964874313,
      0.12027250533718144,
      0.29705483983047154,
      0.2788468488109372,
      1.0407032103531386,
      0.6050999913851877,
      0.6834188314076732,
      0.48252388074254826,
      0.6705286029933137,
      0.7012756196273122
    ],
    [
      0.01609603048002842,
      0.7460978414831427,
      1.0002333910095933,
      0.37922455473582767,
      0.2616108470244749,
      0.4181816844980323,
      0.37925284802196807,
      0.8852058199200245,
      0.688524172682194,
      0.8319134707471867
    ],
    [
      0.1428902255073733,
      1.1770199658243263,
      0.018941896688029102,
      0.7192044900125353,
      1.000652362370137,
      0.4139715437007464,
      0.36724562260434407,
      0.7285823839007155,
      0.33354883010963,
      0.18160531818135373
    ],
    [
      0.23208900739376373,
      0.4732549483388578,
      0.7848976518863895,
      0.20695646632057224,
      0.3774030531049239,
      0.3097896902113904,
      0.39877753646891173,
      0.929863534912555,
      0.5381664972396853,
      0.4060163378982789
    ],
    [
      0.3719808929928486,
      0.6120071750396201,
      0.7501861468070846,
      1.2358261240674129,
      0.21512749586952212,
      0.6022237382123645,
      0.5392300070107231,
      1.0157155958803017,
      0.0462675641586175,
      0.09273863059170595
    ],
    [
      0.44541821683494903,
      0.26424228901529784,
      0.6019498249348879,
      0.9010528100904888,
      0.3094722270289648,
      0.16822747331879825,
      0.15309354272217726,
      0.10338737905703076,
      1.0889923134272241,
      0.7167870429716346
    ],
    [
      0.0007400181767686614,
      0.7424246850637707,
      0.026185767861297036,
      0.27128653784133544,
      0.702626417789885,
      0.24377305047856632,
      0.2035328144580528,
      0.42726235698665543,
      0.41729305471436773,
      0.5746862126190694
    ],
    [
      0.6605177963014855,
      0.004281490379120071,
      0.09974277137720187,
      0.5586755011936418,
      0.1729923242947593,
      0.22080497313433603,
      1.063780718852794,
      0.8258735710024004,
      0.39685674201480375,
      0.9130528818113477
    ]
  ]
  var wLO = [
    [
      0.7089340861668436,
      0.7680058259023971,
      0.539576087559944,
      0.7118152950794744
    ],
    [
      0.2532303680849919,
      0.4488632380596779,
      0.014093795275287022,
      0.08046874241866361
    ],
    [
      1.7009061163031198,
      0.24847487579742414,
      0.253871399879642,
      0.07065775413957862
    ],
    [
      0.9687543882567128,
      0.3996546300102522,
      0.32020066256364244,
      0.399186826892381
    ],
    [
      0.6432417348084482,
      0.5466715657731346,
      0.10727936252595642,
      0.032985237517725884
    ],
    [
      0.7305920118383286,
      0.0007276188514039911,
      0.25309194788612943,
      0.7058067802225629
    ],
    [
      1.1527194866799257,
      0.17884369163963598,
      0.45137582055731224,
      0.4732840911389044
    ],
    [
      1.0266000141294283,
      0.23869373183446915,
      0.35990580556073287,
      0.13802182600960844
    ],
    [
      1.477058323115506,
      0.22098716495185655,
      0.10435730201865762,
      0.20437972736132481
    ],
    [
      1.9235661703620124,
      0.15808625833146428,
      0.1200198244998577,
      0.1449748137574553
    ]
  ]
  var output = math.multiply(math.multiply(input, wIL), wLO)
  // console.log(output)
  var output_3 = output.map((e) => { return Math.pow(e, 3) })
  // console.log(output_3)
  var sum = output_3.reduce((a, b) => { return a + b })
  // console.log(sum)
  var prob = output_3.map((e) => { return e / sum })
  console.log(prob)
  action = moves[prob.indexOf(pickOne(prob))];
  res.send(action);
});

if (process.env.NODE_ENV !== 'test') {
  console.log(`MY_URL is ${myUrl}`)
  app.listen(port, () => console.log(`Listening on port ${port}`))
}

module.exports = app

pickOne = (list) => {
  var index = 0;
  var r = Math.random()

  while (r > 0) {
    r = r - list[index]
    index++
  }
  index--
  return list[index]
}
